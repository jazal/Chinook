@page "/artist/{ArtistId:long}"
@attribute [Authorize]

@using Chinook.Infrastructure
@using Chinook.Core.Models
@using Chinook.ClientModels
@using Chinook.Services.Artists
@using Chinook.Services.Artists.Dtos
@using Chinook.Services.Playlists
@using Chinook.Services.Playlists.Dtos
@using Chinook.Services.Tracks
@using Chinook.Services.Tracks.Dtos
@using Chinook.Services.UserPlaylists
@using Chinook.Services.UserPlaylists.Dtos
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;

@inject IArtistService artistService
@inject ITrackService trackService
@inject IUserPlaylistService userPlaylistService
@inject IPlaylistService playlistService

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Artist == null)
{
    <Loading />
}
else
{
    <h1>@Artist.Name</h1>
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Album title</th>
                <th>Track name</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var track in Tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite == true)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<Modal @ref="PlaylistDialog">
    <Title>Add to playlist</Title>
    <Body>
        @if (SelectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@Artist.Name - @SelectedTrack.AlbumTitle - @SelectedTrack.TrackName</label>
            </div>
        }

        <div class="mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
            <select class="form-control" id="ExistingPlaylist" @bind=Payload.PlaylistId>
                <option></option>
                @foreach (var playlist in Playlists)
                {
                    <option value="@playlist.PlaylistId">@playlist.Name</option>
                }
            </select>
        </div>
        <div class="mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <input type="text" id="NewPlaylist" class="form-control" @bind="Payload.NewPlaylist" placeholder="Name for the new playlist">
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
    </Footer>
</Modal>

@code {
    [Parameter] public long ArtistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    private Modal PlaylistDialog { get; set; }

    private ArtistDto? Artist;
    private List<PlaylistTrackDto> Tracks = new();
    private List<PlaylistDto> Playlists = new();
    private PlaylistTrackDto? SelectedTrack;
    private AddTrackToPlaylistRequestDto Payload = new AddTrackToPlaylistRequestDto();
    private string? InfoMessage;
    private string? CurrentUserId;

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        CurrentUserId = await GetUserId();

        Artist = await artistService.Get(ArtistId);

        await GetAlbumTracks();
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private async Task GetAlbumTracks()
    {
        CurrentUserId = await GetUserId();

        Tracks = await trackService.GetAlbumTracks(ArtistId, CurrentUserId);
    }

    private async Task FavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);

        // Add track to Favorites playlist
        await userPlaylistService.ToggleUserPlaylistAsync(new ToggleUserPlaylistRequest { UserId = await GetUserId(), TrackId = track.TrackId, IsFavorite = true });

        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist Favorites.";

        await GetAlbumTracks();
    }

    private async Task UnfavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);

        // Remove track from Favorites playlist
        await userPlaylistService.ToggleUserPlaylistAsync(new ToggleUserPlaylistRequest { UserId = await GetUserId(), TrackId = track.TrackId, IsFavorite = false });

        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist Favorites.";

        await GetAlbumTracks();
    }

    private async Task OpenPlaylistDialog(long trackId)
    {
        CloseInfoMessage();

        await GetPlaylists();
        Payload.NewPlaylist = null;

        var playlists = await playlistService.GetPlaylistsByTrack(trackId);
        Payload.PlaylistId = playlists.Any() ? playlists[0].PlaylistId : null;
        
        SelectedTrack = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        PlaylistDialog.Open();
    }

    private async Task GetPlaylists()
    {
        Playlists = await playlistService.GetAll(new GetPlaylistsRequestDto { IsFavoriteIncluded = false });
    }

    private async Task AddTrackToPlaylist()
    {
        CloseInfoMessage();

        if (!string.IsNullOrEmpty(Payload.NewPlaylist))
        {
            var isPlaylistExist = await playlistService.IsPlaylistNameExist(Payload.NewPlaylist);

            if (isPlaylistExist)
            {
                InfoMessage = $"Playlist {Payload.NewPlaylist} already exist.";
                PlaylistDialog.Close();
                return;
            }
        }

        Payload.TrackId = SelectedTrack.TrackId;

        await playlistService.AddTrackToPlaylistAsync(Payload);
        InfoMessage = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} added to playlist.";
        
        Payload = new AddTrackToPlaylistRequestDto();
        PlaylistDialog.Close();
    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }
}
