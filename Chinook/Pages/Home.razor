@page "/"
@attribute [Authorize]

@using Chinook.Infrastructure
@using Chinook.Core.Models
@using Chinook.Services.Artists
@using Chinook.Services.Artists.Dtos
@using Microsoft.EntityFrameworkCore

@inject IArtistService artistService

<PageTitle>Index</PageTitle>

<h1>Artists</h1>

<div>
    <input class="form-control form-control-sm" @bind="SearchKeyword" placeholder="Search artists..." />
    <button class="btn btn-sm btn-primary" @onclick="GetArtists">Search</button>
</div>

@if (Artists == null)
{
    <Loading />
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Number of albums</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var artist in Artists)
            {
                <tr>
                    <td><a href="Artist/@artist.ArtistId">@artist.Name</a></td>
                    <td>@artist.AlbumCount</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ArtistWithAlbumCountDto> Artists;
    private string? SearchKeyword = "";
    // [Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }

    protected override async Task OnInitializedAsync() {
        await InvokeAsync(StateHasChanged);
        await GetArtists();
    }

    public async Task GetArtists()
    {
        // var dbContext = await DbFactory.CreateDbContextAsync();
        // var users = dbContext.Users.Include(a => a.UserPlaylists).ToList();

        Artists = await artistService.GetAll(new GetArtistsRequestDto { Keyword = SearchKeyword });
    }

    // public async Task<List<Album>> GetAlbumsForArtist(int artistId)
    // {
    //     var dbContext = await DbFactory.CreateDbContextAsync();
    //     return dbContext.Albums.Where(a => a.ArtistId == artistId).ToList();
    // }
}
